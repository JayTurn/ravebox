{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jay/Documents/projects/ravebox/client/src/components/review/listByQuery/ListByQuery.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * ListByQuery.tsx\n * Queries a list of reviews based on the parameters provided.\n */\n// Modules.\nimport { connect } from 'react-redux';\nimport * as React from 'react'; // Actions.\n\n// Components.\nimport GridReviewList from '../gridReviewList/GridReviewList';\nimport ScrollableReviewList from '../scrollableReviewList/ScrollableReviewList';\nimport SidebarReviewList from '../sidebarReviewList/SidebarReviewList'; // Enumerators.\n\nimport { PresentationType, QueryPath, ReviewListType } from './ListByQuery.enum';\nimport { RetrievalStatus } from '../../../utils/api/Api.enum'; // Interfaces.\n\n/**\n * Builds the query based on the list type requested.\n *\n * @param { ReviewListType } listType - the type of list to be queried.\n */\nvar setQueryListPath = function setQueryListPath(listType) {\n  return function (query) {\n    var path = '';\n\n    switch (listType) {\n      case ReviewListType.PRODUCT:\n        path = \"\".concat(QueryPath.PRODUCT, \"/\").concat(query);\n        break;\n\n      case ReviewListType.CATEGORY:\n        path = \"\".concat(QueryPath.CATEGORY, \"/\").concat(query);\n\n      default:\n    }\n\n    return path;\n  };\n};\n/**\n * Removes the currrent review from the list if it's present.\n *\n * @param { Review } active - the currently active review.\n * @param { Array<Review> } reviews - the list of reviews.\n *\n * @param Array<Review>\n */\n\n\nvar removeActiveReview = function removeActiveReview(active) {\n  return function (reviews) {\n    var list = [];\n    var i = 0;\n\n    do {\n      var current = _objectSpread({}, reviews[i]);\n\n      if (current._id !== active._id) {\n        list.push(_objectSpread({}, current));\n      }\n\n      i++;\n    } while (i < reviews.length);\n\n    return list;\n  };\n};\n/**\n * Returns the list of reviews to the appropriate list.\n *\n * @param { ListByQueryProps } props - the query properties.\n */\n\n\nvar ListByQuery = function ListByQuery(props) {\n  var reviews = [];\n\n  if (props.reviews && props.reviews.length > 0) {\n    switch (props.listType) {\n      case ReviewListType.PRODUCT:\n        if (props.activeReview && props.reviews && props.reviews.length > 0) {\n          reviews = removeActiveReview(props.activeReview)(_toConsumableArray(props.reviews));\n        } else {\n          reviews = _toConsumableArray(props.reviews);\n        }\n\n        break;\n\n      case ReviewListType.CATEGORY:\n        reviews = _toConsumableArray(props.reviews);\n        break;\n\n      default:\n    }\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, reviews.length > 0 && __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, props.presentationType === PresentationType.SCROLLABLE && __jsx(ScrollableReviewList, {\n    listType: props.listType,\n    reviews: reviews,\n    retrievalStatus: RetrievalStatus.SUCCESS,\n    title: props.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), props.presentationType === PresentationType.SIDEBAR && __jsx(SidebarReviewList, {\n    listType: props.listType,\n    reviews: reviews,\n    retrievalStatus: RetrievalStatus.SUCCESS,\n    title: props.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), props.presentationType === PresentationType.GRID && __jsx(GridReviewList, {\n    listType: props.listType,\n    reviews: reviews,\n    retrievalStatus: RetrievalStatus.SUCCESS,\n    title: props.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  })));\n};\n/**\n * Mapping the state updates to the properties from redux.\n */\n\n\n_c = ListByQuery;\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  // Retrieve the review from the active properties.\n  var activeReview = state.review ? state.review.active : undefined;\n  return _objectSpread(_objectSpread({}, ownProps), {}, {\n    activeReview: activeReview\n  });\n};\n\nexport default connect(mapStateToProps)(ListByQuery);\n\nvar _c;\n\n$RefreshReg$(_c, \"ListByQuery\");","map":{"version":3,"sources":["/Users/jay/Documents/projects/ravebox/client/src/components/review/listByQuery/ListByQuery.tsx"],"names":["connect","React","GridReviewList","ScrollableReviewList","SidebarReviewList","PresentationType","QueryPath","ReviewListType","RetrievalStatus","setQueryListPath","listType","query","path","PRODUCT","CATEGORY","removeActiveReview","active","reviews","list","i","current","_id","push","length","ListByQuery","props","activeReview","presentationType","SCROLLABLE","SUCCESS","title","SIDEBAR","GRID","mapStateToProps","state","ownProps","review","undefined"],"mappings":"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","sourcesContent":["/**\n * ListByQuery.tsx\n * Queries a list of reviews based on the parameters provided.\n */\n\n// Modules.\nimport {\n  AnyAction,\n  bindActionCreators,\n  Dispatch\n} from 'redux';\nimport API from '../../../utils/api/Api.model';\nimport { connect } from 'react-redux';\nimport { frontloadConnect } from 'react-frontload';\nimport * as React from 'react';\n\n// Actions.\nimport {\n  updateListByCategory,\n  updateListByProduct\n} from '../../../store/review/Actions';\n\n// Components.\nimport GridReviewList from '../gridReviewList/GridReviewList';\nimport ScrollableReviewList from '../scrollableReviewList/ScrollableReviewList';\nimport SidebarReviewList from '../sidebarReviewList/SidebarReviewList';\n\n// Enumerators.\nimport {\n  PresentationType,\n  QueryPath,\n  ReviewListType\n} from './ListByQuery.enum';\nimport {\n  RequestType,\n  RetrievalStatus\n} from '../../../utils/api/Api.enum';\n\n// Interfaces.\nimport {\n  ListByQueryProps,\n  RetrieveListByQueryResponse\n} from './ListByQuery.interface';\nimport {\n  Review,\n  ReviewGroup\n} from '../Review.interface';\n\n/**\n * Builds the query based on the list type requested.\n *\n * @param { ReviewListType } listType - the type of list to be queried.\n */\nconst setQueryListPath: (\n  listType: ReviewListType\n) => (\n  query: string\n) => string = (\n  listType: ReviewListType\n) => (\n  query: string\n): string => {\n  let path: string = '';\n\n  switch (listType) {\n    case ReviewListType.PRODUCT:\n      path = `${QueryPath.PRODUCT}/${query}`;\n      break;\n    case ReviewListType.CATEGORY:\n      path = `${QueryPath.CATEGORY}/${query}`;\n    default:  \n  }\n\n  return path;\n}\n\n/**\n * Removes the currrent review from the list if it's present.\n *\n * @param { Review } active - the currently active review.\n * @param { Array<Review> } reviews - the list of reviews.\n *\n * @param Array<Review>\n */\nconst removeActiveReview: (\n  active: Review\n) => (\n  reviews: Array<Review>\n) => Array<Review> = (\n  active: Review\n) => (\n  reviews: Array<Review>\n): Array<Review> => {\n  const list: Array<Review> = []; \n\n  let i: number = 0;\n\n  do {\n    const current: Review = {...reviews[i]};\n\n    if (current._id !== active._id) {\n      list.push({...current});\n    }\n\n    i++;\n  } while (i < reviews.length);\n\n  return list;\n}\n\n/**\n * Returns the list of reviews to the appropriate list.\n *\n * @param { ListByQueryProps } props - the query properties.\n */\nconst ListByQuery: React.FC<ListByQueryProps> = (props: ListByQueryProps) => {\n  let reviews: Array<Review> = [];\n\n  if (props.reviews && props.reviews.length > 0) {\n    switch (props.listType) {\n      case ReviewListType.PRODUCT:\n        if (props.activeReview && props.reviews && props.reviews.length > 0) {\n          reviews = removeActiveReview(props.activeReview)([...props.reviews]);\n        } else {\n          reviews = [...props.reviews];\n        }\n        break;\n      case ReviewListType.CATEGORY:\n          reviews = [...props.reviews];\n        break;\n      default:\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {reviews.length > 0 &&\n        <React.Fragment>\n          {props.presentationType === PresentationType.SCROLLABLE &&\n            <ScrollableReviewList\n              listType={props.listType}\n              reviews={reviews}\n              retrievalStatus={RetrievalStatus.SUCCESS}\n              title={props.title}\n            />\n          }\n          {props.presentationType === PresentationType.SIDEBAR &&\n            <SidebarReviewList\n              listType={props.listType}\n              reviews={reviews}\n              retrievalStatus={RetrievalStatus.SUCCESS}\n              title={props.title}\n            />\n          }\n          {props.presentationType === PresentationType.GRID &&\n            <GridReviewList\n              listType={props.listType}\n              reviews={reviews}\n              retrievalStatus={RetrievalStatus.SUCCESS}\n              title={props.title}\n            />\n          }\n        </React.Fragment>\n      }\n    </React.Fragment>\n  );\n}\n\n/**\n * Mapping the state updates to the properties from redux.\n */\nconst mapStateToProps = (state: any, ownProps: ListByQueryProps) => {\n  // Retrieve the review from the active properties.\n  const activeReview: Review = state.review ? state.review.active : undefined;\n\n  return {\n    ...ownProps,\n    activeReview\n  };\n};\n\nexport default connect(mapStateToProps)(ListByQuery);\n"]},"metadata":{},"sourceType":"module"}